relational rose

on delete cascade, on update cascade:: reinforce cascading effects:when forign key primary key relation is established,
when a tuple is deleted from parent table, all the tuples that are concerned to, should also be deleted automatically.

when dept no in department table is changed from 1 to 10 then automatically all the students concerned to dept 1, should get updated with dept_no 10


JOINS: cross product  + some condition(inner,leftouter,right outer,fullouter)


inner-join:
select * from officers o,student s where o.offid=s.sid: is a join which filters from the cross product( select * from officers o,student s) based on the condition  o.offid=s.sid



left-outer join:
select * from officers left join student1 on officers.offid=student.sid;
NOTE:same is the syntax for right outer join


aggregate functions:
to calculate, following predefined functions are used: count,min,max,avg,sum

STRING FUNCTIONS:
upper,lower,left,right,length

NUMERIC FUNC:
abs,round,ceiling,floor


date,time,now,datediff




#############################     KEYWORDS   ######################
commonly used keywords:

ADD: Adds a column in an existing table.
ALTER: Modifies an existing database object, such as a table.
AND: Combines two conditions.
AS: Renames a column or table with an alias.
BETWEEN: Selects values within a given range.
CREATE: Creates a new database, table, index, or view.
DELETE: Deletes rows from a table.
DROP: Deletes a database, table, or index.
FROM: Specifies the table to select or delete data from.
GROUP BY: Groups rows that have the same values into summary rows.
HAVING: Filters groups based on a condition.
INSERT: Inserts new rows into a table.
JOIN: Combines rows from two or more tables.
LIKE: Searches for a specified pattern in a column.
NOT: Negates a condition.
OR: Combines two conditions where either condition can be true.
ORDER BY: Sorts the result set.
SELECT: Retrieves data from a database.
UPDATE: Updates existing data within a table.
WHERE: Filters rows based on a condition.

SHOW TABLES;SHOW DATABASES;SHOW TABLES;SHOW TRIGGERS;
CALL procedure_name,DROP PROCEDURE [IF EXISTS] procedure_name;

###################ADD KEYWORD##################
 modifying database tables:

You can add new columns to an existing table
ALTER TABLE employees ADD COLUMN age INT;

You can add indexes 
ALTER TABLE employees ADD INDEX (age);

You can add constraints like UNIQUE, PRIMARY KEY, or FOREIGN KEY.
ALTER TABLE employees ADD CONSTRAINT unique_email UNIQUE (email);

Adding Partitions:
ALTER TABLE sales ADD PARTITION (PARTITION p4 VALUES LESS THAN (2025));

################## ALTER OPERATOR ################
related to modifying the structure of an existing table:

Adding a New Columns:
ALTER TABLE table_name ADD column_name datatype;
ALTER TABLE Employees ADD COLUMN Address VARCHAR(255), ADD COLUMN PhoneNumber VARCHAR(15);
ALTER TABLE table_name ADD COLUMN column_name data_type after column_name1;
ALTER TABLE table_name ADD COLUMN column_name data_type first;  //to add column at first

Adding a Column with Constraints:
ALTER TABLE Employees ADD COLUMN Email VARCHAR(100) NOT NULL UNIQUE;

Adding an Index:
ALTER TABLE Employees ADD INDEX (LastName);

Adding a Primary Key:
ALTER TABLE Employees ADD PRIMARY KEY (EmployeeID);
ALTER TABLE table_name ADD CONSTRAINT PRIMARY KEY(attribute);

Adding a Foreign Key:
ALTER TABLE Orders ADD CONSTRAINT fk_customer FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID);
ALTER TABLE table_name ADD CONSTRAINT foreign_key_name FOREIGN KEY(attribute) REFERENCES parent_table_name(primary_key_attribute);

alter database database_name read only=1;
alter database database_name read only=0;

Change datatype of column:
ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;

Remove column:
ALTER TABLE table_name DROP COLUMN column_name;

Rename column keeping datatype same:
ALTER TABLE table_name RENAME COLUMN old_name TO new_name;

set default attribute:
ALTER TABLE table_name ALTER attribute SET DEFAULT default_value_for_attribute;

delete foreign key with its name:
ALTER TABLE table_name DROP FOREIGN KEY foreign_key_name;

Rename table:
ALTER TABLE old_table_name RENAME TO new_table_name;

You can add indexes to improve query performance.
ALTER TABLE table_name ADD INDEX index_name (column_name);

Dropping Indexes: 
ALTER TABLE table_name DROP INDEX index_name;

You can add, drop, or reorganize partitions in a table.
ALTER TABLE table_name ADD PARTITION (PARTITION p1 VALUES LESS THAN (1000));

Adding constraint:
ALTER TABLE table_name ADD CONSTRAINT UNIQUE(attribute_name/column);
ALTER TABLE table_name MODIFY attribute data_type not null;

on deletion effects:
ALTER TABLE table_name ADD CONSTRAINT foreign_key_name FOREIGN KEY (attr) REFERENCES parent_table_name(pk_attribute) ON DELETE    SET NULL/CASCADE;

################  LIKE OPERATOR:   ################
search for a specified pattern in a column. 

Finding Values That Start With a Specific Character:
SELECT * FROM Customers WHERE CustomerName LIKE 'A%';

Finding Values That End With a Specific Character:
SELECT * FROM Customers WHERE CustomerName LIKE '%a';

Finding Values That Contain a Specific Sequence of Characters:
SELECT * FROM Customers WHERE CustomerName LIKE '%or%';

Finding Values With a Specific Character in a Certain Position(here r in second position):
SELECT * FROM Customers WHERE CustomerName LIKE '_r%';

Finding Values With a Specific Length(start with a and are atleast 3 characters long):
SELECT * FROM Customers WHERE CustomerName LIKE 'A__%';

Case-Insensitive Search:
SELECT * FROM Customers WHERE LOWER(CustomerName) LIKE 'a%';
This query finds all customers whose names start with ‘a’ or ‘A’ by converting the names to lowercase before comparison.

Using LIKE with UPDATE:
UPDATE Customers SET ContactName = 'Unknown' WHERE ContactName LIKE 'A%';

Using LIKE with DELETE:
DELETE FROM Customers WHERE CustomerName LIKE 'A%';

#################################AND KEYWORD###################################
Combining Conditions:
SELECT * FROM employees WHERE age > 30 AND department = 'HR';

Multiple Conditions in JOIN:
SELECT * FROM employees e JOIN departments d ON e.department_id = d.department_id AND d.location = 'New York';

AND in SELECT with Subquery:
SELECT * FROM employees WHERE department = 'HR' AND id IN (SELECT employee_id FROM projects WHERE project_name = 'Project X');

###############################AS KEYWORDS###################################
Alias for Columns:
SELECT first_name AS fname, last_name AS lname FROM employees;

Alias for Tables:
SELECT e.first_name, d.department_name FROM employees AS e JOIN departments AS d ON e.department_id = d.department_id;

Alias in Subqueries:
SELECT * FROM (SELECT first_name, last_name FROM employees) AS emp;

Alias with Calculated Columns:
SELECT salary * 12 AS annual_salary FROM employees;

Alias with Concatenated Columns:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;

Alias with Aggregate Functions:
SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department;

Alias with Subqueries:
SELECT (SELECT COUNT(*) FROM employees) AS total_employees;

Alias in GROUP BY:
SELECT department AS dept, COUNT(*) AS employee_count FROM employees GROUP BY dept;

Basic Table Alias:
SELECT e.first_name, d.department_name FROM employees AS e JOIN departments AS d ON e.department_id = d.department_id;

Alias in Self-Join:
SELECT e1.first_name AS employee, e2.first_name AS manager
FROM employees AS e1
JOIN employees AS e2 ON e1.manager_id = e2.id;

Alias in Subqueries:
SELECT emp.full_name FROM (SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees) AS emp;

Alias in GROUP BY:
SELECT department AS dept, COUNT(*) AS employee_count FROM employees GROUP BY dept;

Alias in ORDER BY:
SELECT first_name AS fname FROM employees ORDER BY fname;

Alias in HAVING:
SELECT department AS dept, COUNT(*) AS employee_count FROM employees GROUP BY dept HAVING employee_count > 10;

Alias in CASE Statements:
SELECT name, 
       CASE 
           WHEN age > 30 THEN 'Senior'
           ELSE 'Junior'
       END AS position
FROM employees;

##########################BETWEEN KEYWORD###########################

Range for Numbers:
SELECT * FROM products WHERE price BETWEEN 10 AND 20;

Range for Dates:
SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31';

Range for Text Values:
SELECT * FROM products WHERE product_name BETWEEN 'A' AND 'M';

NOT BETWEEN:
SELECT * FROM products WHERE price NOT BETWEEN 10 AND 20;

#############################CREATE KEYWORD######################
Create Database:
CREATE DATABASE mydatabase;

Create Table(declaration):
CREATE TABLE table_name (attr1 type1 NOT NULL,attr2 type2 DEFAULT default_value,attr3 type3 PRIMARY KEY AUTO INCREMENT,attr4 type4,....);

Create Index:
CREATE INDEX index_name ON table_name(attribute);
CREATE INDEX index_name ON table_name(attribute1,attribute2,...);   //multiindices

view:virtual table based on result set of a query,can be interacted upon as if they are real tables
Create View:
CREATE VIEW view_name AS SELECT (attr1,attr2..) FROM employees;

Create Trigger:
CREATE TRIGGER trigger_name BEFORE/AFTER (ACTION:UPDATE/INSERT/DELETE) ON table_name FOR EACH ROW {do something};
CREATE TRIGGER trig1 BEFORE INSERT ON employees FOR EACH ROW SET NEW.created_at = NOW();
CREATE TRIGGER trig2 BEFORE INSERT ON employees FOR EACH ROW SET NEW.sal=OLD.sal*20;

Create Event:
CREATE EVENT my_event ON SCHEDULE EVERY 1 DAY DO DELETE FROM logs WHERE log_date < NOW() - INTERVAL 30 DAY;

crearting a new table with a foreign key:(on delete cascade or on update cascade)
CREATE TABLE table_name(attr1 val1,attr2 val2,attr3 val3......FOREIGN KEY(att3) REFERENCES parent_table_name(pk_attribute) ON {DELETE/UPDATE}    {SET NULL/CASCADE});

creating a procedure(queries stored for reuse):switch delimeter,write proc,switch back delimeter:
DELIMETER $$
CREATE PROCEDURE proc_name(IN attr type,OUT attr type)      //with input and output
BEGIN
    //statements ending with;
END $$
DELIMETER ;

################################DELETE KEYWORD#######################
Delete Specific Records:
DELETE FROM employees WHERE age > 60;

Delete All Records:
DELETE FROM employees;

Delete with JOIN:
DELETE e FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.location = 'New York';

Delete with LIMIT:
DELETE FROM employees ORDER BY id LIMIT 10;

#########################DROP KEYWORD############################
Drop Database:
DROP DATABASE mydatabase;

Drop Table:
DROP TABLE employees;

Drop Index:
DROP INDEX idx_name ON employees;

Drop View:
DROP VIEW emp_view;
###########################FROM KEYWORD##########################
Specify Table in Query:
SELECT * FROM employees;

Subquery in FROM:
SELECT * FROM (SELECT name, age FROM employees) AS emp;

#######################GROUP BY KEYWORD######################
Group Results:
SELECT department, COUNT(*) FROM employees GROUP BY department;

Group with HAVING:
SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 10;

Grouping by Multiple Columns-Grouping rows by multiple columns.
SELECT Country, City, COUNT(*) FROM Customers GROUP BY Country, City;

Using aggregate functions like SUM(), AVG(), MAX(), MIN(), and COUNT() with GROUP BY.
SELECT Department, AVG(Salary) FROM Employees GROUP BY Department;

Using CASE statements within GROUP BY to create custom groupings.
SELECT 
    CASE 
        WHEN Age < 20 THEN 'Teen'
        WHEN Age BETWEEN 20 AND 29 THEN 'Twenties'
        ELSE 'Others'
    END AS AgeGroup, COUNT(*) 
FROM Users 
GROUP BY AgeGroup;

##########################HAVING KEYWORD############################
Filter Grouped Results:
SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 10;

HAVING with Aggregate Functions:
SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;

####################INSERT KEYWORD#########################
Insert Single Record://can be used to add selected values of the attributes
INSERT INTO table_name (attr1,attr2,attr3...) VALUES (val1,val2,val3...);

Insert Multiple Records:
INSERT INTO table_name (attr1,attr2,attr3...) VALUES (val1,val2,val3...)(vala1,vala2,vala3...)(valb1,valb2,valb3...)...;

Insert with SELECT:
INSERT INTO employees (id, name, age) SELECT id, name, age FROM new_employees;

Insert Data from Another Table: Using INSERT INTO ... SELECT to copy data from one table to another.
INSERT INTO employees_archive (first_name, last_name, hire_date)
SELECT first_name, last_name, hire_date FROM employees WHERE hire_date < '2024-01-01';

Insert Ignore: Ignoring errors for duplicate entries.
INSERT IGNORE INTO employees (employee_id, first_name, last_name) VALUES (1, 'Bob', 'Brown');

Insert on Duplicate Key Update: Updating existing records if a duplicate key is found.
INSERT INTO employees (employee_id, first_name, last_name) VALUES (1, 'Bob', 'Brown')
ON DUPLICATE KEY UPDATE first_name = 'Robert', last_name = 'Brown';

#########################JOIN KEYWORD########################
Inner Join:
SELECT e.name, d.department_name FROM employees e INNER JOIN departments d ON e.department_id = d.department_id;

Left Join(or Left Outer Join): Retrieves all records from the left table and the matched records from the right table. If no match is found, NULL values are returned for columns from the right table:
SELECT e.name, d.department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.department_id;

Right Join(or Right Outer Join): Retrieves all records from the right table and the matched records from the left table. If no match is found, NULL values are returned for columns from the left table:
SELECT e.name, d.department_name FROM employees e RIGHT JOIN departments d ON e.department_id = d.department_id;

Full Join(or Full Outer Join): Retrieves all records when there is a match in either left or right table. If there is no match, NULL values are returned for columns from the table without a match:
SELECT e.name, d.department_name FROM employees e FULL JOIN departments d ON e.department_id = d.department_id;

Self Join: Joins a table with itself. This is useful for hierarchical data or comparing rows within the same table.
SELECT A.EmployeeID, A.EmployeeName, B.ManagerName
FROM Employees A, Employees B
WHERE A.ManagerID = B.EmployeeID;

Cross Join: Produces the Cartesian product of the two tables, meaning it returns all possible combinations of rows:
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
CROSS JOIN Orders;

#################LIKE KEYWORD##########################
To search for a specified pattern :: % substitutes one or more characters, _ is one random letter:

Find rows matching a specific pattern:
SELECT * FROM employees WHERE attribute LIKE '_J%';

Search for a Substring:
SELECT * FROM Products WHERE attribute LIKE '_chocolate%';

LIKE with Wildcards:
SELECT * FROM employees WHERE attribute LIKE '%Doe';

NOT LIKE(to Exclude Patterns):
SELECT * FROM employees WHERE name NOT LIKE 'J%';

Case-Insensitive Search: Perform a case-insensitive search.
SELECT * FROM Cities WHERE CityName LIKE 'new%'

Search for a Specific Length:
SELECT * FROM Orders WHERE OrderID LIKE '____';.

###################NOT KEYWORD#########################
Negate Condition:
SELECT * FROM employees WHERE NOT (age > 30);

NOT IN:
SELECT * FROM employees WHERE department NOT IN ('HR', 'Finance');

#########################ORDER BY KEYWORD##########################
The ORDER BY keyword in MySQL is used to sort the result set of a query by one or more columns.

Sort Results (default is ascending order):
SELECT * FROM employees ORDER BY age DESC;

Sort by Multiple Columns: Sort by multiple with succeeding used to break ties in the preceeing columns:
SELECT * FROM employees ORDER BY attr1 ASC, attr2 DESC, attr3 ASC;

Sort in Descending Order: Use the DESC keyword to sort in descending order:
SELECT * FROM Employees ORDER BY HireDate DESC;

Sort by result of an Expression:
SELECT * FROM Products ORDER BY Price * Quantity;

Sort by Column Alias: Use an alias defined in the SELECT clause to sort.
SELECT FirstName, LastName, (Salary * 12) AS AnnualSalary
FROM Employees
ORDER BY AnnualSalary DESC;

Sort with NULL Values: Control the order of NULL values.
SELECT * FROM Employees ORDER BY Department IS NULL, Department
The query first sorts the rows so that all non-NULL Department values come before the NULL values

Sort by Case Statement: Use a CASE statement to define custom sorting logic.
SELECT * FROM Employees
ORDER BY CASE
    WHEN Department = 'Sales' THEN 1
    WHEN Department = 'HR' THEN 2
    ELSE 3
END;

######################SELECT KEYWORD#####################
Select selected/specific Columns:
SELECT col1,col2,col3.. FROM employees;
SELECT col1,col2,col3.. FROM table_name WHERE <condition>;
SELECT * FROM table_name WHERE attribute BETWEEN value1 AND value2;
SELECT * FROM table_name WHERE attribute in(value1,value2,value3......);

Select All Columns:
SELECT * FROM employees;
SELECT * FROM table_name WHERE <condition>;

Select with Subquery:
SELECT * FROM (SELECT name, age FROM employees) AS emp;

display a view:
SELECT * FROM view_name;

//if both tables have same number of rows
SELECT attr1,attr2 FROM table1 UNION SELECT attr3,attr4 FROM table2;
SELECT * FROM table1 UNION SELECT * FROM table2;

#################################UPDATE KEYWORD#############################
used to modify existing records in a table.

Update single Record:
UPDATE employees SET attr1=val1,attr2=val2.. WHERE <condition to select row(s)>;

Update Multiple Columns: Change the values of multiple columns.
UPDATE Employees SET Salary = 55000, Department = 'HR' WHERE EmployeeID = 2;

Update whole column:
UPDATE table_name SET attribute=value;

Update Using Subquery: Update a table based on values from another table.
UPDATE Employees SET Salary = (SELECT AVG(Salary) FROM Employees WHERE Department = 'IT') WHERE Department = 'HR'

Bulk Update: Perform bulk updates efficiently.
UPDATE Orders SET Status = 'Shipped' WHERE OrderDate < '2024-01-01';

Update with CASE Statement: Use a CASE statement to apply different updates based on conditions.
UPDATE Employees
SET Salary = CASE
    WHEN Department = 'Sales' THEN Salary * 1.1
    WHEN Department = 'HR' THEN Salary * 1.05
    ELSE Salary
END

Update with JOIN(Update records in one table based on related data in another table):
UPDATE employees e JOIN departments d ON e.department_id = d.department_id SET e.salary = e.salary * 1.1 WHERE d.location = 'New York';

